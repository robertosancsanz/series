<FindBugsFilter>
    <!-- Full list of bugs can be found here. http://findbugs.sourceforge.net/bugDescriptions.html -->
    <!-- Exclude files -->

    <!-- Ignore generated R.classes -->
    <Match>
        <Or>
            <Class name="~*.R.*"/>
        </Or>
        <Bug category="PERFORMANCE,MALICIOUS_CODE,STYLE,SECURITY,CORRECTNESS,MT_CORRECTNESS,BAD_PRACTICE,I18N"/>
    </Match>

    <!-- Ignore generated Manifest classes -->
    <Match>
        <Class name="~.*Manifest\$.*"/>
    </Match>
    <!-- Ignore mockwebserver-package which is debug only -->
    <Match>
        <Package name="~.*mockwebserver"/>
    </Match>
    <!-- Ignore debugmenu-package which is debug only -->
    <Match>
        <Package name="~.*debugmenu"/>
    </Match>
    <!-- Ignore Field not initialized in constructor but dereferenced without null check in Fragments -->
    <Match>
        <Class name="~.*Fragment"/>
        <Bug pattern=" UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR "/>
    </Match>

    <!-- Do not check auto-generated classes (Dagger puts $ into class names) -->
    <Match>
        <Class name="~.*Dagger*.*"/>
    </Match>

    <Match>
        <Bug pattern="SIC_INNER_SHOULD_BE_STATIC_ANON "/>
    </Match>

    <!-- Ignore findings either caused by the Kotlin compiler or not a unsafe because of the Kotlin compiler -->
    <Match>
        <Source name="~.*\.kt"/>
        <Bug pattern="RCN_REDUNDANT_NULLCHECK_OF_NONNULL_VALUE"/>
    </Match>
    <Match>
        <Source name="~.*\.kt"/>
        <Bug pattern="RCN_REDUNDANT_NULLCHECK_WOULD_HAVE_BEEN_A_NPE"/>
    </Match>
    <Match>
        <Source name="~.*\.kt"/>
        <Bug pattern="DLS_DEAD_LOCAL_STORE"/>
    </Match>
    <Match>
        <Source name="~.*\.kt"/>
        <Bug pattern="BC_BAD_CAST_TO_ABSTRACT_COLLECTION"/>
    </Match>
    <Match>
        <Source name="~.*\.kt"/>
        <Bug pattern="NM_CONFUSING"/>
    </Match>
    <Match>
        <Source name="~.*\.kt"/>
        <Bug pattern="NP_NULL_ON_SOME_PATH_FROM_RETURN_VALUE"/>
    </Match>
    <!-- The usage of "private inline fun" can produce unused methods. Should not be a problem since
     DexGuard should remove them anyway. Hopefully the Kotlin compiler will fix this, soon. -->
    <Match>
        <Source name="~.*\.kt"/>
        <Bug pattern="UPM_UNCALLED_PRIVATE_METHOD"/>
    </Match>
    <!-- The usage of "it" in lambda functions can produce an unnecessary assignment
    of the "it" parameter in the bytecode. Hopefully the Kotlin compiler will fix this, soon.
    See: https://discuss.kotlinlang.org/t/should-we-be-reporting-findbugs-issues/2105 -->
    <Match>
        <Source name="~.*\.kt"/>
        <Bug pattern="SA_LOCAL_SELF_ASSIGNMENT"/>
    </Match>

    <!--Ignore zxing classes (google library)-->
    <Match>
        <Class name="~com.google.zxing.*"/>
    </Match>

    <!-- Ignore Android PDF Writer classes as it is maintained by http://coderesearchlabs.com/androidpdfwriter -->

    <Match>
        <Package name="~com\.ing\.mobile\.pdfwriter.*"/>
    </Match>

    <Match>
        <Package name="~pdfwriter"/>
    </Match>

    <!-- Ignore Numberpicker classes as it will not be further maintained -->

    <Match>
        <Package name="~com\.ing\.net\.simonvt.*"/>
    </Match>

    <!-- Cloud physics seem to work here -->
    <Match>
        <Bug code="FE"/>
    </Match>

    <!-- Ignore BR.classes generated by databinding-->
    <Match>
        <Class name="~.*BR\$*"/>
    </Match>

    <!-- Ignore classes generated by databinding-->
    <Match>
        <Class name="~.*\.databinding\..*Binding[^\.]*"/>
    </Match>
</FindBugsFilter>
